{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/code-advisor.ts"],"sourcesContent":["// Use server directive is required for Genkit flows.\n'use server';\n\n/**\n * @fileOverview AI code advisor flow that analyzes a Next.js project and suggests improvements.\n *\n * - analyzeCode - Analyzes the project codebase and suggests improvements.\n * - AnalyzeCodeInput - The input type for the analyzeCode function.\n * - AnalyzeCodeOutput - The return type for the analyzeCode function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst AnalyzeCodeInputSchema = z.object({\n  codebase: z\n    .string()\n    .describe('The entire codebase of the Next.js project to analyze.'),\n});\nexport type AnalyzeCodeInput = z.infer<typeof AnalyzeCodeInputSchema>;\n\nconst AnalyzeCodeOutputSchema = z.object({\n  suggestions: z\n    .array(z.string())\n    .describe('An array of suggestions for improving the codebase.'),\n  confidenceLevel: z\n    .string()\n    .describe(\n      'The AI models confidence level in the suggestions, must be one of: HIGH, MEDIUM, LOW.'\n    ),\n});\nexport type AnalyzeCodeOutput = z.infer<typeof AnalyzeCodeOutputSchema>;\n\nexport async function analyzeCode(input: AnalyzeCodeInput): Promise<AnalyzeCodeOutput> {\n  return analyzeCodeFlow(input);\n}\n\nconst analyzeCodePrompt = ai.definePrompt({\n  name: 'analyzeCodePrompt',\n  input: {schema: AnalyzeCodeInputSchema},\n  output: {schema: AnalyzeCodeOutputSchema},\n  prompt: `You are an AI code advisor for Next.js projects.\n\nAnalyze the following codebase and provide suggestions for improvements, best practices, and optimizations.\n\nCodebase:\n\\`\\`\\`\n{{{codebase}}}\n\\`\\`\\`\n\nProvide suggestions in markdown format.\nAlso include your confidence level in the suggestions, it must be one of: HIGH, MEDIUM, LOW.`,\n  config: {\n    safetySettings: [\n      {\n        category: 'HARM_CATEGORY_HATE_SPEECH',\n        threshold: 'BLOCK_ONLY_HIGH',\n      },\n      {\n        category: 'HARM_CATEGORY_DANGEROUS_CONTENT',\n        threshold: 'BLOCK_NONE',\n      },\n      {\n        category: 'HARM_CATEGORY_HARASSMENT',\n        threshold: 'BLOCK_MEDIUM_AND_ABOVE',\n      },\n      {\n        category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT',\n        threshold: 'BLOCK_LOW_AND_ABOVE',\n      },\n    ],\n  },\n});\n\nconst analyzeCodeFlow = ai.defineFlow(\n  {name: 'analyzeCodeFlow', inputSchema: AnalyzeCodeInputSchema, outputSchema: AnalyzeCodeOutputSchema},\n  async input => {\n    const {output} = await analyzeCodePrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":"AAAA,qDAAqD;;;;;;AAGrD;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,yBAAyB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtC,UAAU,uIAAA,CAAA,IAAC,CACR,MAAM,GACN,QAAQ,CAAC;AACd;AAGA,MAAM,0BAA0B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvC,aAAa,uIAAA,CAAA,IAAC,CACX,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IACd,QAAQ,CAAC;IACZ,iBAAiB,uIAAA,CAAA,IAAC,CACf,MAAM,GACN,QAAQ,CACP;AAEN;AAGO,eAAe,uCAAS,GAAT,YAAY,KAAuB;IACvD,OAAO,gBAAgB;AACzB;AAEA,MAAM,oBAAoB,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IACxC,MAAM;IACN,OAAO;QAAC,QAAQ;IAAsB;IACtC,QAAQ;QAAC,QAAQ;IAAuB;IACxC,QAAQ,CAAC;;;;;;;;;;4FAUiF,CAAC;IAC3F,QAAQ;QACN,gBAAgB;YACd;gBACE,UAAU;gBACV,WAAW;YACb;YACA;gBACE,UAAU;gBACV,WAAW;YACb;YACA;gBACE,UAAU;gBACV,WAAW;YACb;YACA;gBACE,UAAU;gBACV,WAAW;YACb;SACD;IACH;AACF;AAEA,MAAM,kBAAkB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACnC;IAAC,MAAM;IAAmB,aAAa;IAAwB,cAAc;AAAuB,GACpG,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,kBAAkB;IACzC,OAAO;AACT;;;IA9CoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 325, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/ai-code-advisor/actions.ts"],"sourcesContent":["\"use server\";\n\nimport { analyzeCode, type AnalyzeCodeInput, type AnalyzeCodeOutput } from \"@/ai/flows/code-advisor\";\n\nexport async function getCodeAnalysis(\n  input: AnalyzeCodeInput\n): Promise<{ data?: AnalyzeCodeOutput; error?: string }> {\n  try {\n    const result = await analyzeCode(input);\n    return { data: result };\n  } catch (err) {\n    console.error(\"Error in getCodeAnalysis:\", err);\n    const errorMessage = err instanceof Error ? err.message : \"An unknown error occurred.\";\n    return { error: `Failed to get code analysis: ${errorMessage}` };\n  }\n}\n"],"names":[],"mappings":";;;;;AAEA;;;;;AAEO,eAAe,uCAAa,GAAb,gBACpB,KAAuB;IAEvB,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,qIAAA,CAAA,cAAW,AAAD,EAAE;QACjC,OAAO;YAAE,MAAM;QAAO;IACxB,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,MAAM,eAAe,eAAe,QAAQ,IAAI,OAAO,GAAG;QAC1D,OAAO;YAAE,OAAO,CAAC,6BAA6B,EAAE,cAAc;QAAC;IACjE;AACF;;;IAXsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 360, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 411, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/ai-code-advisor/components/code-advisor-form.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const CodeAdvisorForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call CodeAdvisorForm() from the server but CodeAdvisorForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/ai-code-advisor/components/code-advisor-form.tsx <module evaluation>\",\n    \"CodeAdvisorForm\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,kBAAkB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjD;IAAa,MAAM,IAAI,MAAM;AAA8O,GAC3Q,0FACA","debugId":null}},
    {"offset": {"line": 425, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/ai-code-advisor/components/code-advisor-form.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const CodeAdvisorForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call CodeAdvisorForm() from the server but CodeAdvisorForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/ai-code-advisor/components/code-advisor-form.tsx\",\n    \"CodeAdvisorForm\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,kBAAkB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjD;IAAa,MAAM,IAAI,MAAM;AAA8O,GAC3Q,sEACA","debugId":null}},
    {"offset": {"line": 439, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 449, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/ai-code-advisor/page.tsx"],"sourcesContent":["import { CodeAdvisorForm } from \"./components/code-advisor-form\";\n\nexport default function AICodeAdvisorPage() {\n  return (\n    <div className=\"container mx-auto py-8\">\n      <CodeAdvisorForm />\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;;;AAEe,SAAS;IACtB,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC,6KAAA,CAAA,kBAAe;;;;;;;;;;AAGtB","debugId":null}}]
}